net.inbetween.Action -> a:
    net.inbetween.ActionType type -> a
    net.inbetween.ActionType getType() -> a
net.inbetween.ActionSet -> b:
net.inbetween.ActionType -> c:
    net.inbetween.ActionType ACTION_PHONE_HOME -> a
    net.inbetween.ActionType ACTION_START_TIMER -> b
    net.inbetween.ActionType[] $VALUES -> c
    net.inbetween.ActionType[] values() -> values
    net.inbetween.ActionType valueOf(java.lang.String) -> valueOf
net.inbetween.EventStartIntent -> d:
    java.lang.String action -> a
    java.lang.String data -> b
net.inbetween.NetworkMessage -> e:
    org.json.JSONObject hdrObjectArray -> b
    org.json.JSONArray hdrArray -> c
    org.json.JSONObject hdr -> d
    org.json.JSONObject bodyObjectArray -> e
    org.json.JSONArray placesArray -> f
    org.json.JSONArray actionsArray -> g
    java.lang.String notification -> h
    java.lang.String sentTime -> i
    java.lang.String sender -> j
    java.lang.String positiveActionText -> k
    int positiveDelay -> l
    java.lang.String negativeActionText -> m
    int negativeDelay -> n
    java.lang.String neutralActionText -> o
    int neutralDelay -> p
    long maxSilence -> a
    java.lang.String errorCode -> q
    java.lang.String errorDescription -> r
    org.json.JSONObject errorObjectBody -> s
    java.util.concurrent.LinkedBlockingQueue ackQueue -> t
    java.lang.String getPositiveMessage() -> a
    java.lang.String getNegativeMessage() -> b
    java.lang.String getNeutralMessage() -> c
    java.lang.String getNotification() -> d
    java.lang.String getSentTime() -> e
    java.lang.String getSender() -> f
    java.lang.String getSourceIbid() -> g
    java.lang.String getAckId() -> h
    long getMaxSilence() -> i
    java.lang.String getErrorCode() -> j
    java.lang.String getErrorDescription() -> k
    org.json.JSONObject errorObjectBody() -> l
    int getHeaderVersion() -> u
    void putHeader(java.lang.String,int,int) -> a
    void putHeader(java.lang.String,int,int,java.lang.String,java.lang.String) -> a
    org.json.JSONArray createClientVersionInfo(java.lang.String,java.lang.String,java.lang.String) -> b
    void putClientVersionSchemaBody(java.lang.String,java.lang.String,java.lang.String) -> a
    void putPayloadSchema1Body(android.location.Location) -> a
    void putPayloadUserResponse(java.lang.String) -> a
    void putPayloadAck() -> m
    boolean isPolicy() -> n
    boolean isConfig() -> o
    boolean isNotifyUser() -> p
    boolean isError() -> q
    java.lang.String getSchema() -> v
    int getPayloadVersion() -> r
    void putEmptyBody() -> s
    int numPlaces() -> t
    org.json.JSONObject getPlace(int) -> a
    org.json.JSONObject getPlaceActions(int) -> b
    org.json.JSONArray createTimeStamp() -> w
    org.json.JSONArray createDeviceSettings() -> x
    boolean isDuplicate(java.lang.String) -> b
net.inbetween.Place -> f:
    double longitude -> a
    double latitude -> b
    float radius -> c
    boolean onLocation -> d
    boolean entered -> i
    boolean departed -> j
    android.location.Location locOnPlace -> e
    java.util.List cellLocs -> f
    long switchTime -> g
    java.lang.String key -> h
    boolean hasLocOnPlace() -> a
    void addCellLoc(android.location.Location) -> a
    int cellLocsSize() -> b
    void clearCellLocs() -> c
    boolean equals(java.lang.Object) -> equals
net.inbetween.PlaceHash -> g:
net.inbetween.PolicyActions -> h:
net.inbetween.TimedLeakyBucket -> i:
    int bucketSize -> b
    long replenishTime -> c
    long changeTime -> d
    int bucket -> a
    boolean takeToken() -> a
net.inbetween.TransparentActivity.TransparentActivityDialog -> net.inbetween.TransparentActivity.TransparentActivityDialog:
    net.inbetween.services.WishRunner mBoundService -> a
    boolean mIsBound -> b
    java.lang.String resultString -> c
    net.inbetween.receivers.AlarmReceiver dialogEndOfLife -> d
    android.content.ServiceConnection mConnection -> e
    void onDestroy() -> onDestroy
    android.app.Dialog onCreateDialog(int,android.os.Bundle) -> onCreateDialog
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void createDialog(android.os.Bundle,android.content.Context) -> a
    net.inbetween.services.WishRunner access$002(net.inbetween.TransparentActivity.TransparentActivityDialog,net.inbetween.services.WishRunner) -> a
    java.lang.String access$102(net.inbetween.TransparentActivity.TransparentActivityDialog,java.lang.String) -> a
    net.inbetween.services.WishRunner access$000(net.inbetween.TransparentActivity.TransparentActivityDialog) -> a
net.inbetween.TransparentActivity.TransparentActivityDialog$1 -> j:
    net.inbetween.TransparentActivity.TransparentActivityDialog this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
net.inbetween.TransparentActivity.TransparentActivityDialog$2 -> k:
    net.inbetween.TransparentActivity.TransparentActivityDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
net.inbetween.TransparentActivity.TransparentActivityDialog$3 -> l:
    net.inbetween.TransparentActivity.TransparentActivityDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
net.inbetween.TransparentActivity.TransparentActivityDialog$4 -> m:
    net.inbetween.TransparentActivity.TransparentActivityDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
net.inbetween.TransparentActivity.TransparentActivityDialog$5 -> n:
    net.inbetween.TransparentActivity.TransparentActivityDialog this$0 -> a
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.VoiceRecognition -> o:
    android.speech.SpeechRecognizer recognizer -> a
    net.inbetween.services.WishRunner wishRunner -> b
    android.os.Bundle notifyBundle -> c
    java.util.HashSet positiveResponses -> d
    java.util.HashSet negativeResponses -> e
    java.util.HashSet skipResponses -> f
    android.content.Intent intent -> g
    java.lang.String lastResult -> h
    void run() -> run
    void startListening() -> a
    void onResults(android.os.Bundle) -> onResults
    boolean exactMatch(java.util.ArrayList,java.util.HashSet) -> a
    void returnNoAnswer() -> b
    void returnAnswer(java.lang.String) -> a
    void onUtteranceCompleted(java.lang.String) -> onUtteranceCompleted
    void onError(int) -> onError
    void onReadyForSpeech(android.os.Bundle) -> onReadyForSpeech
    void onBeginningOfSpeech() -> onBeginningOfSpeech
    void onBufferReceived(byte[]) -> onBufferReceived
    void onEndOfSpeech() -> onEndOfSpeech
    void onEvent(int,android.os.Bundle) -> onEvent
    void onPartialResults(android.os.Bundle) -> onPartialResults
    void onRmsChanged(float) -> onRmsChanged
net.inbetween.actions.PhoneHomeAction -> p:
net.inbetween.actions.StartTimerAction -> q:
    long seconds -> b
    java.lang.String name -> c
net.inbetween.analytics.AnalyticsConsumer -> r:
    java.util.concurrent.LinkedBlockingQueue logQueue -> a
    java.io.File analyticsFile -> b
    java.io.PrintStream printStream -> c
    java.io.File localDir -> d
    net.inbetween.services.WishRunner wrContext -> e
    long maxAnalyticsFileSize -> f
    java.lang.String cloudUrl -> g
    android.net.ConnectivityManager connManager -> h
    java.lang.String fileName -> i
    java.lang.String secondFileSuffix -> j
    boolean openStream() -> a
    void saveToFile(org.json.JSONObject) -> a
    boolean uploadFile(java.lang.String,java.lang.String) -> a
    boolean uploadFiles() -> b
    boolean sendAnalytics(org.json.JSONObject) -> b
    void run() -> run
    void speakDebug(java.lang.String) -> a
net.inbetween.analytics.AnalyticsProducer -> s:
    java.util.concurrent.LinkedBlockingQueue logQueue -> a
    boolean sendWV(java.lang.String) -> a
net.inbetween.autoUpdate.autoUpdate -> t:
    java.lang.String downloadFolderName -> a
    java.lang.String assetsReadyStateFileName -> b
    java.lang.String ibAssetsFolderName -> c
    java.lang.String LOG_TAG -> d
    java.util.concurrent.LinkedBlockingQueue updateQ -> e
    net.inbetween.services.WishRunner wRunner -> f
    android.content.Context context -> g
    net.inbetween.log.LogProducer logger -> h
    net.inbetween.receivers.autoUpdateCheckReceiver updateCheckAlarm -> i
    int INITIAL_UPDATE_CHECK_DELAY -> j
    int IB_PFIELD_BODY_CHECK_FOR_UPDATE_PERIOD -> k
net.inbetween.autoUpdate.autoUpdate$1 -> u:
    net.inbetween.autoUpdate.autoUpdate this$0 -> a
    void run() -> run
net.inbetween.autoUpdate.autoUpdate$2 -> v:
    int[] $SwitchMap$net$inbetween$autoUpdate$updateEvent$UpdateEventType -> a
net.inbetween.autoUpdate.autoUpdate$autoUpdateSupport -> w:
    net.inbetween.autoUpdate.autoUpdate this$0 -> a
    boolean fileExists(java.lang.String) -> a
    java.lang.String getFullZipFileDescriptor() -> d
    java.lang.String getFullZipFileName() -> e
    void deleteZipFiles() -> f
    boolean zipPkgExists() -> g
    java.lang.String getCurrentlyPendingPkgVersion() -> a
    java.lang.String getCurrentlyInstalledPkgVersion() -> b
    boolean isWebPackageReady() -> c
    void applyAnyUpdateFromPendingPkg(boolean) -> a
    int installPackage() -> h
    boolean downloadPKG(java.lang.String,java.lang.String,boolean) -> a
    void unzip(java.lang.String) -> b
    net.inbetween.NetworkMessage checkForUpdate(java.lang.String,java.lang.String) -> a
    java.lang.String buildCheckForUpdateMsg(java.lang.String,java.lang.String,java.lang.String) -> a
net.inbetween.autoUpdate.updateEvent -> x:
    java.lang.Object eventInfo -> a
    net.inbetween.autoUpdate.updateEvent$UpdateEventType event -> b
    boolean immidiateUpdate -> c
net.inbetween.autoUpdate.updateEvent$UpdateEventType -> y:
    net.inbetween.autoUpdate.updateEvent$UpdateEventType CHECK_FOR_APK_UPDATE -> a
    net.inbetween.autoUpdate.updateEvent$UpdateEventType CHECK_FOR_WEB_UPDATE -> b
    net.inbetween.autoUpdate.updateEvent$UpdateEventType DOWNLOAD_APK -> c
    net.inbetween.autoUpdate.updateEvent$UpdateEventType DOWNLOAD_WEB_PKG -> d
    net.inbetween.autoUpdate.updateEvent$UpdateEventType INSTALL_APK -> e
    net.inbetween.autoUpdate.updateEvent$UpdateEventType INSTALL_WEB_PKG -> f
    net.inbetween.autoUpdate.updateEvent$UpdateEventType[] $VALUES -> g
    net.inbetween.autoUpdate.updateEvent$UpdateEventType[] values() -> values
    net.inbetween.autoUpdate.updateEvent$UpdateEventType valueOf(java.lang.String) -> valueOf
net.inbetween.log.LogConsumer -> z:
    java.util.concurrent.LinkedBlockingQueue logQueue -> k
    int maxLevel -> l
    long uploadTimeout -> m
    java.io.File logPath -> a
    java.io.File logFile -> b
    java.io.OutputStream logStream -> c
    java.io.PrintStream printStream -> d
    java.io.File localDir -> e
    boolean external -> f
    net.inbetween.services.WishRunner wrContext -> g
    boolean lastUploadSucceeded -> h
    long maxLogFileSize -> n
    android.text.format.Time lastPush -> i
    java.lang.String cloudUrl -> j
    boolean openStream() -> a
    boolean uploadLog() -> b
    void run() -> run
    void speakDebug(java.lang.String) -> a
net.inbetween.log.LogEntry -> aa:
    java.lang.String severity -> a
    int level -> b
    java.lang.String message -> c
    android.text.format.Time entryTime -> d
net.inbetween.log.LogProducer -> ab:
    java.util.concurrent.LinkedBlockingQueue logQueue -> c
    int maxLevel -> d
    boolean privateMode -> a
    int severityPol -> b
    boolean isSeverityPolicy(int) -> a
    void log(java.lang.String,int,java.lang.String) -> a
net.inbetween.proximity.Accelerometer -> ac:
    android.hardware.SensorManager sensorManager -> f
    float gravityMag -> g
    float FILTER_FACTOR -> a
    long possiblyChangeTime -> h
    long startMovingTime -> i
    long stopMovingTime -> j
    net.inbetween.proximity.ProximityAlert3 proxAlert -> k
    float START_ACC_CHANGE -> b
    float STOP_ACC_CHANGE -> c
    long TIME_TO_START -> d
    long TIME_TO_STOP -> e
    boolean moving -> l
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    long getStartMovingTime() -> a
    long getStopMovingTime() -> b
    boolean isMoving() -> c
    void start() -> d
    void stop() -> e
net.inbetween.proximity.LocationEvent -> ad:
    java.lang.Object eventInfo -> a
    net.inbetween.proximity.LocationEvent$LocEventType event -> b
    android.os.PowerManager$WakeLock wakeLock -> c
net.inbetween.proximity.LocationEvent$LocEventType -> ae:
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_LOCATION_CHANGE -> a
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_PROVIDER_DISABLED -> b
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_PROVIDER_ENABLED -> c
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_PROVIDER_STATUS -> d
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_GPS_STATUS -> e
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_PLACES_CHANGE -> f
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_STATE_CHANGE -> g
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_STOP_RECORDING -> h
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_START_RECORDING -> i
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_STOP_TEST -> j
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_START_TEST -> k
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_HANDLE_LOCATION -> l
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_WIFI_STATUS -> m
    net.inbetween.proximity.LocationEvent$LocEventType LOC_EVENT_CELLULAR_STATUS -> n
    net.inbetween.proximity.LocationEvent$LocEventType[] $VALUES -> o
    net.inbetween.proximity.LocationEvent$LocEventType[] values() -> values
    net.inbetween.proximity.LocationEvent$LocEventType valueOf(java.lang.String) -> valueOf
net.inbetween.proximity.LocationHelper -> af:
    org.json.JSONObject locationToJSON(android.location.Location) -> b
    java.lang.String locationToJSONString(android.location.Location) -> a
net.inbetween.proximity.ProximityAlert3 -> ag:
    boolean TRACKING -> a
    android.location.LocationManager locManager -> b
    android.net.wifi.WifiManager wifiManager -> E
    net.inbetween.proximity.Accelerometer accelerometer -> c
    long PHONE_STATIONARY_TIME -> d
    boolean confirmNoMoveOnPlace -> e
    android.location.Location lastLocation -> f
    java.util.Map bestLocations -> g
    java.util.Map locStaleFactor -> h
    java.util.Map prevLocations -> F
    long MAX_LOC_TIME -> G
    long CAN_USE_LOC_TIME -> i
    java.util.Map departFactor -> H
    float NETWORK_DEPART_FACTOR -> I
    double ON_PLACE_PERCENT -> J
    float WIFI_MAX_DIST -> j
    float CELL_MIN_ACC -> k
    java.util.List myPlaces -> l
    int MAX_GPS_OK_LOC_TIME -> K
    int GPS_BUCKET_MAX -> L
    net.inbetween.TimedLeakyBucket gpsBurstLB -> m
    android.location.Location okGPSLoc -> n
    int GPS_START_BUCKET_TIME -> M
    int GPS_START_BUCKET_SIZE -> N
    net.inbetween.TimedLeakyBucket gpsStartLB -> O
    boolean GPS_ON -> o
    int GPS_MAX_FIX_TIME -> p
    int GPS_TIME_AFTER_FIX -> q
    int GPS_SLEEP_TIME -> P
    long gpsStartTime -> r
    long gpsStopTime -> Q
    long gpsFixTime -> s
    boolean userNeedsGPS -> t
    float MAX_LOC_ACC -> R
    long CELL_DEPART_TIME -> S
    float DEPART_TOGGLE_FACTOR -> T
    boolean askedForProviders -> U
    boolean askedForWifi -> V
    java.util.Map maybeDepartedTimes -> u
    int CELL_DEPART_TOTAL_COUNT -> W
    int CELL_DEPART_FAR_COUNT -> X
    int CELL_MAYBE_ENTER_COUNT -> Y
    long IGNORE_NETWORK_AFTER_GPS_TIME -> v
    boolean firstNetworkLocAfterStart -> w
    long IGNORE_NETWORK_AFTER_WIFI_TIME -> x
    java.util.concurrent.LinkedBlockingQueue servicesEventQ -> Z
    boolean allowedToTrack -> y
    java.util.Set disabledProviders -> aa
    java.util.Map providerListeners -> z
    android.location.LocationListener passiveListener -> ab
    long FIRST_GPS_ATTEMPT_TIME -> ac
    long APPROACHING_TIME -> ad
    long NOT_APPROACHING_TIME -> ae
    long STATIONARY_TIME -> af
    long RECENT_DEPART_TIME -> ag
    android.location.Location prevNearGPSLoc -> ah
    android.location.Location nearGPSLoc -> ai
    boolean nearGPSLocsNeeded -> aj
    android.os.Handler mHandler -> A
    net.inbetween.services.WishRunner wRunner -> B
    net.inbetween.log.LogProducer logProd -> C
    android.content.BroadcastReceiver wifiBR -> ak
    boolean listeningOnWifi -> al
    boolean saveBattery -> D
    float MAX_CELL_DIST_DIFF -> am
    float MAX_CELL_ACC_DIFF -> an
    float APPROACHING_GPS_SPEED -> ao
    float STATIONARY_GPS_DISTANCE -> ap
    android.location.Location getLastLocation() -> a
    boolean Track(boolean) -> a
    void speakAndLog(java.lang.String,int) -> a
    java.lang.String getStackError(java.lang.Exception) -> a
    void toggleNetworkListener() -> b
    void requestLocationUpdates(java.lang.String) -> a
    float distanceToPlace(net.inbetween.Place,android.location.Location) -> a
    double percentOverlap(float,net.inbetween.Place,android.location.Location) -> a
    void departPlace(net.inbetween.Place) -> a
    void enterPlace(net.inbetween.Place) -> b
    void doneWithPlaces(android.location.Location) -> a
    int numLocsFarAway(net.inbetween.Place,java.util.List) -> a
    boolean isUniqueCellLoc(android.location.Location,java.util.List) -> a
    void setNearGPSLoc(android.location.Location) -> f
    void clearNearGPSLocs() -> f
    boolean shouldStartGPS(net.inbetween.Place) -> c
    boolean handleCellLoc(android.location.Location) -> b
    boolean handleWifiLoc(android.location.Location) -> c
    boolean handleGPSLoc(android.location.Location) -> g
    boolean handleNetworkLoc(android.location.Location) -> d
    boolean needGPSBeforeSleep() -> c
    void sendOkGPSLoc() -> d
    android.location.Location ensureLocNotOnPlace(android.location.Location) -> h
    int getProviderPriority(java.lang.String) -> b
    boolean setLocation(android.location.Location) -> e
    android.location.Location setLocationHelper(android.location.Location) -> i
    boolean startGPS() -> e
    boolean stopGPS() -> g
    boolean stopGPS(boolean) -> b
    boolean stopTracking(boolean) -> c
    boolean startTracking(boolean) -> d
    boolean verifyNeededProviders() -> h
    java.lang.String access$200(net.inbetween.proximity.ProximityAlert3,java.lang.Exception) -> a
    android.location.Location access$900(net.inbetween.proximity.ProximityAlert3,android.location.Location) -> a
net.inbetween.proximity.ProximityAlert3$1 -> ah:
    net.inbetween.proximity.ProximityAlert3 this$0 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
net.inbetween.proximity.ProximityAlert3$2 -> ai:
    net.inbetween.proximity.ProximityAlert3 this$0 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
net.inbetween.proximity.ProximityAlert3$3 -> aj:
    net.inbetween.services.WishRunner val$wRunner -> a
    net.inbetween.proximity.ProximityAlert3 this$0 -> b
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
net.inbetween.proximity.ProximityAlert3$4 -> ak:
    net.inbetween.proximity.ProximityAlert3 this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.proximity.ProximityAlert3$5 -> al:
    boolean val$track -> a
    net.inbetween.proximity.ProximityAlert3 this$0 -> b
    void run() -> run
net.inbetween.proximity.ProximityAlert3$6 -> am:
    boolean val$save -> a
    net.inbetween.proximity.ProximityAlert3 this$0 -> b
    void run() -> run
net.inbetween.proximity.ProximityAlert3$7 -> an:
    net.inbetween.Place[] val$newPlaces -> a
    net.inbetween.proximity.ProximityAlert3 this$0 -> b
    void run() -> run
net.inbetween.proximity.ProximityAlert3$8 -> ao:
    net.inbetween.proximity.ProximityAlert3 this$0 -> a
    void run() -> run
net.inbetween.receivers.AlarmReceiver -> net.inbetween.receivers.AlarmReceiver:
    android.app.PendingIntent pendingIntent -> b
    android.content.Context context -> c
    void clear() -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.receivers.BootCompletedReceiver -> net.inbetween.receivers.BootCompletedReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.receivers.CollectLocationAlarmReceiver -> net.inbetween.receivers.CollectLocationAlarmReceiver:
    java.util.concurrent.LinkedBlockingQueue locEventQ -> a
    android.os.PowerManager powerManager -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.receivers.ConnectivityReceiver -> net.inbetween.receivers.ConnectivityReceiver:
    java.util.concurrent.LinkedBlockingQueue secureTcpEventQ -> a
    boolean wifiConnected -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.receivers.EventAlarmReceiver -> net.inbetween.receivers.EventAlarmReceiver:
    java.util.concurrent.LinkedBlockingQueue serviceEventQ -> a
    net.inbetween.log.LogProducer logger -> d
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.receivers.PhoneState -> ap:
    boolean inProgress -> a
    java.util.concurrent.LinkedBlockingQueue eventQ -> b
    boolean callInProgress() -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
net.inbetween.receivers.ProximityAlarmReceiver -> net.inbetween.receivers.ProximityAlarmReceiver:
    java.util.concurrent.LinkedBlockingQueue eventQ -> a
    net.inbetween.log.LogProducer logger -> d
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.receivers.ProximityReceiver -> net.inbetween.receivers.ProximityReceiver:
    java.util.concurrent.LinkedBlockingQueue directorEventQ -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.receivers.SnoozeDialogReceiver -> net.inbetween.receivers.SnoozeDialogReceiver:
    java.util.concurrent.LinkedBlockingQueue serviceEventQ -> a
    net.inbetween.log.LogProducer logger -> d
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.receivers.WakeUpReceiver -> net.inbetween.receivers.WakeUpReceiver:
    java.util.concurrent.LinkedBlockingQueue serviceEventQ -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.receivers.autoUpdateCheckReceiver -> net.inbetween.receivers.autoUpdateCheckReceiver:
    java.util.concurrent.LinkedBlockingQueue autoUpdateQ -> a
    net.inbetween.log.LogProducer logger -> d
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.receivers.connectionMonitorAlarmReceiver -> net.inbetween.receivers.connectionMonitorAlarmReceiver:
    java.util.concurrent.LinkedBlockingQueue controlQ -> a
    net.inbetween.log.LogProducer logger -> d
    java.lang.String connectionId -> e
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.receivers.connectionRetryAlarmReceiver -> net.inbetween.receivers.connectionRetryAlarmReceiver:
    java.util.concurrent.LinkedBlockingQueue logicalConnectionEventsQ -> a
    net.inbetween.log.LogProducer logger -> d
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.sectcp.tcpChannelControlEvent -> aq:
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent event -> a
    java.lang.String connectionId -> b
net.inbetween.sectcp.tcpChannelControlEvent$controlEvent -> ar:
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent SEND -> a
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent WAKEUP -> b
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent DEQUEUE -> c
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent DRAIN_DATA_QUEUE -> d
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent CHECKACK -> e
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent UNDEFINED -> f
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent[] $VALUES -> g
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent[] values() -> values
    net.inbetween.sectcp.tcpChannelControlEvent$controlEvent valueOf(java.lang.String) -> valueOf
net.inbetween.sectcp.tcpChannelPayload -> as:
    java.lang.String connectionId -> a
    java.lang.String msg -> b
net.inbetween.sectcp.tcpClientV3 -> at:
    java.util.concurrent.LinkedBlockingQueue serviceQ -> y
    java.util.concurrent.LinkedBlockingQueue logicalConnectionEventsQ -> a
    java.util.concurrent.LinkedBlockingQueue writerControlQ -> b
    java.util.concurrent.LinkedBlockingQueue readerControlQ -> c
    java.util.concurrent.LinkedBlockingQueue toServerDataQ -> d
    java.lang.String hostName -> e
    int portNum -> f
    int maxTcpMsgSize -> g
    int HEADER_TOTAL_LEN_SIZE -> h
    int HEADER_VERSION_SIZE -> i
    int HEADER_ACK_SIZE -> j
    int HEADER_PAYLOAD_SIZE -> k
    java.lang.String currentProtocolVersion -> l
    javax.net.ssl.SSLSocket sslsock -> m
    int lastConnectionAttempt -> n
    int staleSocketInterval -> o
    int retryInterval -> p
    net.inbetween.services.WishRunner wRunner -> q
    android.content.Context context -> r
    net.inbetween.log.LogProducer logger -> s
    net.inbetween.receivers.connectionMonitorAlarmReceiver monitorAlarm -> t
    net.inbetween.receivers.connectionRetryAlarmReceiver reconnectAlarm -> u
    int MAX_CONNECTION_RETRIES -> v
    int retriesLeft -> w
    javax.net.ssl.TrustManager[] trustAllCerts -> x
    void sendMessage(java.lang.String) -> a
    java.lang.String createConnection(java.lang.String) -> c
    void connShutdown() -> a
    java.lang.String reconnect(java.lang.String) -> b
    void writeMsgToChannel(java.io.PrintWriter,java.lang.String,java.lang.String) -> a
    void access$600(net.inbetween.sectcp.tcpClientV3,java.lang.String) -> a
    void access$800(net.inbetween.sectcp.tcpClientV3,java.io.PrintWriter,java.lang.String,java.lang.String) -> a
net.inbetween.sectcp.tcpClientV3$1 -> au:
    net.inbetween.sectcp.tcpClientV3 this$0 -> a
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
net.inbetween.sectcp.tcpClientV3$2 -> av:
    net.inbetween.sectcp.tcpClientV3 this$0 -> a
    void run() -> run
net.inbetween.sectcp.tcpClientV3$3 -> aw:
    net.inbetween.sectcp.tcpClientV3 this$0 -> a
    void run() -> run
net.inbetween.sectcp.tcpClientV3$4 -> ax:
    net.inbetween.sectcp.tcpClientV3 this$0 -> a
    void run() -> run
net.inbetween.sectcp.tcpClientV3$5 -> ay:
    int[] $SwitchMap$net$inbetween$sectcp$tcpLogicConnectionEvent$logicalConnEvent -> a
    int[] $SwitchMap$net$inbetween$sectcp$tcpChannelControlEvent$controlEvent -> b
net.inbetween.sectcp.tcpLogicConnectionEvent -> az:
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent event -> a
    java.lang.String payload -> b
    boolean status -> c
net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent -> ba:
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent CONN_ON -> a
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent CONN_OFF -> b
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent CONN_RETRY -> c
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent CONN_RETRY_ALARM -> d
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent SOCKET_ERROR -> e
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent NETWORK_STATUS -> f
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent[] $VALUES -> g
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent[] values() -> values
    net.inbetween.sectcp.tcpLogicConnectionEvent$logicalConnEvent valueOf(java.lang.String) -> valueOf
net.inbetween.services.ServiceEvent -> net.inbetween.services.ServiceEvent:
    java.lang.Object eventInfo -> a
    net.inbetween.services.ServiceEvent$EventType event -> b
net.inbetween.services.ServiceEvent$EventType -> net.inbetween.services.ServiceEvent$EventType:
    net.inbetween.services.ServiceEvent$EventType EVENT_CONNECTIVITY -> a
    net.inbetween.services.ServiceEvent$EventType EVENT_DISCONNECTED -> b
    net.inbetween.services.ServiceEvent$EventType EVENT_LOCATION_DEPARTED -> c
    net.inbetween.services.ServiceEvent$EventType EVENT_LOCATION_ENTERED -> d
    net.inbetween.services.ServiceEvent$EventType EVENT_LOCATION_NEEDPROVIDER -> e
    net.inbetween.services.ServiceEvent$EventType EVENT_LOCATION_NEEDWIFI -> f
    net.inbetween.services.ServiceEvent$EventType EVENT_LOCATION_DONE -> g
    net.inbetween.services.ServiceEvent$EventType EVENT_MOUTH_MUTE -> h
    net.inbetween.services.ServiceEvent$EventType EVENT_MOUTH_READY -> i
    net.inbetween.services.ServiceEvent$EventType EVENT_NEWS_VIEWED -> j
    net.inbetween.services.ServiceEvent$EventType EVENT_PHONE_HOME -> k
    net.inbetween.services.ServiceEvent$EventType EVENT_PHONE_HOME_TIMER -> l
    net.inbetween.services.ServiceEvent$EventType EVENT_POLICY_TIMER -> m
    net.inbetween.services.ServiceEvent$EventType EVENT_PRIVATE_MODE -> n
    net.inbetween.services.ServiceEvent$EventType EVENT_PROMPT_ANSWERED -> o
    net.inbetween.services.ServiceEvent$EventType EVENT_PROMPT_NOT_ANSWERED -> p
    net.inbetween.services.ServiceEvent$EventType EVENT_PROMPT_USER -> q
    net.inbetween.services.ServiceEvent$EventType EVENT_SAVE_BATTERY -> r
    net.inbetween.services.ServiceEvent$EventType EVENT_SERVER_CONNECTED -> s
    net.inbetween.services.ServiceEvent$EventType EVENT_SERVER_MSG -> t
    net.inbetween.services.ServiceEvent$EventType EVENT_SERVER_RECONNECT_TIMER -> u
    net.inbetween.services.ServiceEvent$EventType EVENT_SET_UP_DEBUG_MODE -> v
    net.inbetween.services.ServiceEvent$EventType EVENT_SET_DEBUG_SPEAK -> w
    net.inbetween.services.ServiceEvent$EventType EVENT_START_INTENT -> x
    net.inbetween.services.ServiceEvent$EventType EVENT_SPEECH_OVER -> y
    net.inbetween.services.ServiceEvent$EventType EVENT_SYNTHESIZE_DONE -> z
    net.inbetween.services.ServiceEvent$EventType EVENT_TICKET -> A
    net.inbetween.services.ServiceEvent$EventType EVENT_TOGGLE_DEBUG_MODE -> B
    net.inbetween.services.ServiceEvent$EventType EVENT_UNKNOWN -> C
    net.inbetween.services.ServiceEvent$EventType EVENT_USER_READY -> D
    net.inbetween.services.ServiceEvent$EventType EVENT_USER_LOGGED_IN -> E
    net.inbetween.services.ServiceEvent$EventType EVENT_WIFI_CONNECTED -> F
    net.inbetween.services.ServiceEvent$EventType EVENT_WIFI_DISCONNECTED -> G
    net.inbetween.services.ServiceEvent$EventType EVENT_CLIENT_UP_TO_DATE -> H
    net.inbetween.services.ServiceEvent$EventType EVENT_CLIENT_UPDATING -> I
    net.inbetween.services.ServiceEvent$EventType EVENT_CLIENT_UPDATE_FAILED -> J
    net.inbetween.services.ServiceEvent$EventType EVENT_CLIENT_INSTALL_APK -> K
    net.inbetween.services.ServiceEvent$EventType EVENT_CLEINT_WEBPKG_INSTALLED -> L
    net.inbetween.services.ServiceEvent$EventType EVENT_CLEINT_WEBPKG_INSTALLED_IMMEDIATE -> M
    net.inbetween.services.ServiceEvent$EventType EVENT_CLIENT_LOCATION_SUCCESS -> N
    net.inbetween.services.ServiceEvent$EventType EVENT_CLIENT_LOCATION_FAIL -> O
    net.inbetween.services.ServiceEvent$EventType[] $VALUES -> P
    net.inbetween.services.ServiceEvent$EventType[] values() -> values
    net.inbetween.services.ServiceEvent$EventType valueOf(java.lang.String) -> valueOf
net.inbetween.services.WishRunner -> net.inbetween.services.WishRunner:
    net.inbetween.sectcp.tcpClientV3 tcpPortal -> y
    net.inbetween.util.cloudAddress cloudAddr -> z
    java.util.concurrent.LinkedBlockingQueue autoUpdateQ -> a
    net.inbetween.autoUpdate.autoUpdate autoUpdateService -> b
    java.util.concurrent.LinkedBlockingQueue eventQ -> A
    java.util.LinkedList notificationQueue -> B
    android.os.Bundle activeNotificationBundle -> C
    java.util.concurrent.LinkedBlockingQueue logQueue -> D
    net.inbetween.log.LogConsumer logConsumer -> E
    net.inbetween.log.LogProducer logger -> c
    android.media.MediaPlayer mediaPlayer -> F
    java.util.concurrent.LinkedBlockingQueue analyticsQueue -> G
    net.inbetween.analytics.AnalyticsConsumer analyticsConsumer -> H
    net.inbetween.analytics.AnalyticsProducer analytics -> d
    java.util.concurrent.LinkedBlockingQueue logicalConnectionEventsQ -> I
    int SERVICESTATE_TKT -> e
    int SERVICESTATE_CONNECTED -> f
    int SERVICESTATE_PROMPT_INUSE -> g
    int SERVICESTATE_NEED_WIFI_ENABLED -> h
    int SERVICESTATE_NO_CONNECTIVITY -> i
    int SERVICESTATE_PRIVATE -> j
    int SERVICESTATE_NEEDPROVIDER -> k
    int SERVICESTATE_CONNECTING -> l
    int SERVICESTATE_NEWS_WAITING -> m
    int SERVICESTATE_TALKING -> n
    int SERVICESTATE_LISTENING -> o
    int ID_NEWS_NOTIFICATION -> p
    int ServiceState -> J
    java.lang.String tkt -> K
    java.lang.String PROXIMITY_INTENT_ACTION -> q
    long MIN_PROMPT_TIME -> L
    long askedForConnectivity -> M
    long askedForProviders -> N
    int policyVersion -> O
    int configVersion -> P
    android.content.SharedPreferences preferencesInstance -> Q
    net.inbetween.PolicyActions policyActions -> R
    net.inbetween.PlaceHash placeHash -> S
    net.inbetween.actions.StartTimerAction startTimerAction -> T
    int timerSequence -> U
    net.inbetween.receivers.PhoneState phoneState -> V
    boolean silenceSpeech -> W
    boolean voiceRecognition -> X
    android.text.format.Time phoneHomeTime -> Y
    android.text.format.Time notificationTime -> Z
    net.inbetween.proximity.ProximityAlert3 ibProximityAlert -> r
    android.app.Notification statusBarNotification -> aa
    java.lang.CharSequence statusBarText -> ab
    long disconnectedTimeStamp -> ac
    boolean NotificationIndicators -> ad
    android.content.Context appContext -> ae
    android.app.PendingIntent contentIntent -> af
    java.util.HashMap outstandingAlarms -> ag
    net.inbetween.receivers.EventAlarmReceiver privateModeAlarm -> ah
    android.app.AlarmManager alarmManager -> ai
    net.inbetween.util.Mouth mouth -> s
    boolean debugTalk -> aj
    int debugTalkValue -> ak
    boolean debugMode -> al
    net.inbetween.receivers.WakeUpReceiver wakeupReceiver -> t
    android.location.Location currentLocation -> am
    android.app.Notification newsNotification -> u
    android.media.AudioManager audioManager -> v
    net.inbetween.VoiceRecognition voiceRecognizer -> an
    android.os.Handler loopHandler -> w
    android.os.IBinder mBinder -> ao
    boolean multipleLoginsFound -> x
    boolean saveBattery -> ap
    int voiceRetryCount -> aq
    int localNotificationAck -> ar
    long notificationStartTime -> as
    boolean isSpeechSilent() -> s
    boolean State(int) -> b
    android.content.Context getAppContext() -> a
    java.lang.String readTicket() -> t
    boolean getSilence() -> b
    void setSilence(boolean) -> a
    boolean getVoiceRecognition() -> c
    void setVoiceRecognition(boolean) -> b
    java.lang.String getTicket() -> d
    net.inbetween.util.cloudAddress getCloudAddress() -> e
    void ticketRefreshed() -> f
    void checkForUpdate(boolean,boolean,java.lang.String) -> a
    void downloadUpdate(boolean) -> c
    boolean getDebugTalk() -> g
    void setDebugTalk(boolean) -> d
    boolean getDebugMode() -> h
    void toggleDebug() -> i
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void returnUserAnswer(java.lang.String) -> a
    void returnNoAnswer() -> j
    void returnNoAnswer(java.lang.String) -> b
    void startSelf(android.content.Context) -> a
    boolean sendVersions() -> u
    android.content.SharedPreferences prefs() -> v
    void storePolicyVersion(int) -> c
    int readPolicyVersion() -> w
    int getPolicyVersion() -> k
    java.lang.String getPolicy() -> x
    void storeConfigVersion(int) -> d
    int readConfigVersion() -> y
    int getConfigVersion() -> l
    java.lang.String getConfig() -> z
    boolean setupPlacesAndActions(net.inbetween.NetworkMessage) -> a
    boolean readPlaceActions(org.json.JSONArray,java.lang.String) -> a
    net.inbetween.receivers.EventAlarmReceiver startTimedEvent(long,net.inbetween.services.ServiceEvent$EventType,java.lang.String) -> a
    void phoneHomeNow() -> m
    void updateStatusBarInfo(int,boolean) -> a
    java.lang.CharSequence getStatusBarInfo() -> A
    boolean setPrivateMode(int) -> a
    long getPrivateMode() -> n
    void enablePrivateMode(int) -> e
    void disablePrivateMode() -> o
    boolean connectivityAvailable(android.content.Context) -> b
    android.os.Bundle createUserNotificationBundle(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle createTransparentActivityDialogBundle(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    void speakDebug(java.lang.String) -> c
    void speak(java.lang.String) -> d
    void speak(java.lang.String,long) -> a
    void heraldNews() -> B
    void newsViewed() -> p
    boolean getSaveBattery() -> q
    void setSaveBattery(boolean) -> e
    void storeSaveBattery(boolean) -> f
    void broadcastServiceEvent(android.content.Context,net.inbetween.services.ServiceEvent$EventType) -> a
    void broadcastServiceEvent(net.inbetween.services.ServiceEvent$EventType) -> a
    void startNotification(android.os.Bundle) -> a
    void startIntent(java.lang.String,java.lang.String) -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void deleteWavFile(java.lang.String) -> f
    java.util.concurrent.LinkedBlockingQueue access$000(net.inbetween.services.WishRunner) -> a
    net.inbetween.PolicyActions access$100(net.inbetween.services.WishRunner) -> b
    android.location.Location access$202(net.inbetween.services.WishRunner,android.location.Location) -> a
    int access$376(net.inbetween.services.WishRunner,int) -> a
    long access$400(net.inbetween.services.WishRunner) -> c
    long access$500(net.inbetween.services.WishRunner) -> d
    android.os.Bundle access$600(net.inbetween.services.WishRunner,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void access$700(net.inbetween.services.WishRunner,android.os.Bundle) -> a
    long access$402(net.inbetween.services.WishRunner,long) -> a
    int access$302(net.inbetween.services.WishRunner,int) -> b
    int access$300(net.inbetween.services.WishRunner) -> e
    void access$800(net.inbetween.services.WishRunner) -> f
    long access$900(net.inbetween.services.WishRunner) -> g
    long access$902(net.inbetween.services.WishRunner,long) -> b
    int access$372(net.inbetween.services.WishRunner,int) -> c
    boolean access$1002(net.inbetween.services.WishRunner,boolean) -> a
    void access$1100(net.inbetween.services.WishRunner) -> h
    java.util.HashMap access$1200(net.inbetween.services.WishRunner) -> i
    boolean access$1302(net.inbetween.services.WishRunner,boolean) -> b
    boolean access$1300(net.inbetween.services.WishRunner) -> j
    boolean access$1402(net.inbetween.services.WishRunner,boolean) -> c
    android.content.SharedPreferences access$1500(net.inbetween.services.WishRunner) -> k
    boolean access$1400(net.inbetween.services.WishRunner) -> l
    void access$1600(net.inbetween.services.WishRunner,int) -> d
    android.os.Bundle access$1700(net.inbetween.services.WishRunner) -> m
    void access$1800(net.inbetween.services.WishRunner,java.lang.String) -> a
    android.os.Bundle access$1702(net.inbetween.services.WishRunner,android.os.Bundle) -> b
    long access$1902(net.inbetween.services.WishRunner,long) -> c
    boolean access$2000(net.inbetween.services.WishRunner,int) -> e
    int access$2108(net.inbetween.services.WishRunner) -> n
    int access$2100(net.inbetween.services.WishRunner) -> o
    void access$2200(net.inbetween.services.WishRunner) -> p
    android.text.format.Time access$2300(net.inbetween.services.WishRunner) -> q
    void access$2400(net.inbetween.services.WishRunner,long) -> d
    boolean access$2500(net.inbetween.services.WishRunner) -> r
    void access$2600(net.inbetween.services.WishRunner,java.lang.String,java.lang.String) -> a
    void access$2700(net.inbetween.services.WishRunner,int) -> f
    void access$2800(net.inbetween.services.WishRunner,java.lang.String) -> b
    boolean access$2900(net.inbetween.services.WishRunner,net.inbetween.NetworkMessage) -> a
    void access$3000(net.inbetween.services.WishRunner,int) -> g
    void access$3100(net.inbetween.services.WishRunner,java.lang.String) -> c
    android.os.Bundle access$3200(net.inbetween.services.WishRunner,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    void access$3300(net.inbetween.services.WishRunner) -> s
    net.inbetween.sectcp.tcpClientV3 access$3400(net.inbetween.services.WishRunner) -> t
    void access$3500(net.inbetween.services.WishRunner) -> u
    void access$3600(net.inbetween.services.WishRunner,java.lang.String) -> d
    java.lang.String access$3702(java.lang.String) -> e
    java.lang.String access$3800(net.inbetween.services.WishRunner) -> v
    java.lang.String access$3700() -> r
    java.util.concurrent.LinkedBlockingQueue access$3900(net.inbetween.services.WishRunner) -> w
    android.location.Location access$200(net.inbetween.services.WishRunner) -> x
    void access$4000(net.inbetween.services.WishRunner,android.location.Location) -> b
    net.inbetween.actions.StartTimerAction access$4102(net.inbetween.services.WishRunner,net.inbetween.actions.StartTimerAction) -> a
    net.inbetween.actions.StartTimerAction access$4100(net.inbetween.services.WishRunner) -> y
    net.inbetween.receivers.EventAlarmReceiver access$4200(net.inbetween.services.WishRunner,long,net.inbetween.services.ServiceEvent$EventType,java.lang.String) -> a
net.inbetween.services.WishRunner$1 -> bb:
    net.inbetween.services.WishRunner this$0 -> a
    void run() -> run
net.inbetween.services.WishRunner$2 -> bc:
    int[] $SwitchMap$net$inbetween$services$ServiceEvent$EventType -> a
    int[] $SwitchMap$net$inbetween$ActionType -> b
net.inbetween.services.WishRunner$LocalBinder -> bd:
    net.inbetween.services.WishRunner this$0 -> a
    net.inbetween.services.WishRunner getService() -> a
net.inbetween.util.HttpPostRequest -> be:
    org.apache.http.impl.client.DefaultHttpClient httpClient -> a
    org.apache.http.protocol.HttpContext httpContext -> b
    java.lang.String ret -> c
    org.apache.http.HttpResponse response -> d
    org.apache.http.client.methods.HttpPost httpPost -> e
    java.lang.String ticket -> f
    java.lang.String appName -> g
    boolean sendPost(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean sendContentPost(java.lang.String,java.lang.String,java.lang.String) -> b
    boolean send(java.lang.String,org.apache.http.entity.AbstractHttpEntity,java.lang.String) -> a
net.inbetween.util.Mouth -> bf:
    android.content.Context context -> b
    net.inbetween.log.LogProducer logger -> c
    java.util.ArrayList initialMsgs -> d
    int beepId -> e
    java.lang.String localDir -> f
    net.inbetween.util.Mouth$State state -> g
    java.util.concurrent.LinkedBlockingQueue serviceQ -> a
    android.speech.tts.TextToSpeech tts -> h
    void onInit(int) -> onInit
    void setDefaultUtterenceCompletedListener() -> a
    void mouthIsMute() -> d
    boolean isPending() -> b
    void speak(java.lang.String,long) -> a
    void close() -> c
    void onUtteranceCompleted(java.lang.String) -> onUtteranceCompleted
    boolean synthesizeToFile(java.lang.String,java.lang.String) -> a
net.inbetween.util.Mouth$State -> bg:
    net.inbetween.util.Mouth$State ERROR -> a
    net.inbetween.util.Mouth$State PENDING -> b
    net.inbetween.util.Mouth$State INITIALIZED -> c
    net.inbetween.util.Mouth$State[] $VALUES -> d
    net.inbetween.util.Mouth$State[] values() -> values
    net.inbetween.util.Mouth$State valueOf(java.lang.String) -> valueOf
net.inbetween.util.clientConfigInfo -> bh:
    java.lang.String envSuffix -> a
    java.lang.String versionType -> b
net.inbetween.util.cloudAddress -> bi:
    java.lang.String envSuffix -> a
    android.content.Context appContext -> b
    java.lang.String assetsReadyStateFileName -> c
    java.lang.String ibAssetsFolderName -> d
    boolean isWebPackageReady() -> a
    boolean isNonProduction() -> b
    java.lang.String getAuthDomain(boolean) -> a
    java.lang.String getWebPortalUrl(java.lang.String) -> a
    boolean writeClientConfig(java.lang.String,boolean) -> a
    net.inbetween.util.clientConfigInfo getClientConfig() -> c
    java.lang.String getAnyFileContents(java.io.File,java.lang.String) -> a
net.inbetween.util.ibSupportUtil -> bj:
    java.io.File homeDir -> a
    java.lang.String stripCR(java.lang.String) -> a
    java.lang.String getFileContents(java.lang.String,java.lang.String) -> a
    java.lang.String getFileContentsInternal(java.io.File) -> a
    boolean writeToFile(java.io.File,java.lang.String) -> a
    java.io.File getPublicFile(java.lang.String,java.lang.String) -> b
net.inbetween.webview.IbWebview -> net.inbetween.webview.IbWebview:
    java.lang.String STORAGE_LOCATION_AREA -> o
    android.content.BroadcastReceiver serviceReceiver -> p
    java.lang.String tkt -> a
    android.webkit.WebView webView -> q
    android.app.Activity activity -> b
    android.net.ConnectivityManager connManager -> r
    int tcpPortalServerPort -> c
    java.lang.String appBuildId -> d
    android.app.ProgressDialog loginProgressDialog -> e
    android.app.ProgressDialog progressBar -> s
    android.app.Dialog updateFailedDialog -> t
    android.app.Dialog networkFailedDialog -> u
    boolean loadedManifest -> f
    boolean wpSkip -> g
    boolean firstLoginDialog -> h
    boolean pageLoaded -> i
    boolean wifiConnected -> j
    boolean inBackground -> k
    boolean updatePending -> l
    net.inbetween.util.cloudAddress cloudAddr -> m
    org.json.JSONObject blockedList -> n
    boolean startInNewsPanel -> v
    net.inbetween.services.WishRunner wishRunnerService -> w
    android.content.ServiceConnection wishRunnerConnection -> x
    void initIbConfig() -> initIbConfig
    java.lang.String startUrl(boolean) -> startUrl
    java.lang.String getCachedTicket() -> getCachedTicket
    void setTkt(java.lang.String) -> setTkt
    java.lang.String getTkt() -> getTkt
    void setManifestLoaded(boolean) -> setManifestLoaded
    void broadcastServiceEvent(android.content.Context,net.inbetween.services.ServiceEvent$EventType) -> broadcastServiceEvent
    void broadcastServiceEvent(net.inbetween.services.ServiceEvent$EventType) -> broadcastServiceEvent
    boolean getManifestLoaded() -> getManifestLoaded
    void installApkv2() -> installApkv2
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onNewIntent(android.content.Intent) -> onNewIntent
    void updateBlockList() -> updateBlockList
    boolean isBlockedUrl(java.lang.String) -> a
    void checkForStartPage(android.content.Intent) -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    boolean hasTicket() -> hasTicket
    android.webkit.WebView access$000(net.inbetween.webview.IbWebview) -> a
    net.inbetween.services.WishRunner access$100(net.inbetween.webview.IbWebview) -> b
    boolean access$200(net.inbetween.webview.IbWebview,java.lang.String) -> a
    android.app.ProgressDialog access$300(net.inbetween.webview.IbWebview) -> c
    net.inbetween.services.WishRunner access$102(net.inbetween.webview.IbWebview,net.inbetween.services.WishRunner) -> a
    boolean access$500(net.inbetween.webview.IbWebview) -> d
    boolean access$502(net.inbetween.webview.IbWebview,boolean) -> a
net.inbetween.webview.IbWebview$1 -> bk:
    net.inbetween.webview.IbWebview this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
net.inbetween.webview.IbWebview$2 -> bl:
    net.inbetween.webview.IbWebview this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
net.inbetween.webview.IbWebview$3 -> bm:
    net.inbetween.webview.IbWebview this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.webview.IbWebview$4 -> bn:
    net.inbetween.webview.IbWebview this$0 -> a
    void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback) -> onGeolocationPermissionsShowPrompt
    void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater) -> onReachedMaxAppCacheSize
    void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater) -> onExceededDatabaseQuota
net.inbetween.webview.IbWebview$5 -> bo:
    net.inbetween.webview.IbWebview$5$RemoveSpinnerReciever removeSpinnerTimer -> a
    net.inbetween.webview.IbWebview this$0 -> b
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onLoadResource(android.webkit.WebView,java.lang.String) -> onLoadResource
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
net.inbetween.webview.IbWebview$5$RemoveSpinnerReciever -> bp:
    net.inbetween.webview.IbWebview$5 this$1 -> a
    void doWork$3b2d1350(android.content.Intent) -> a
net.inbetween.webview.IbWebview$6 -> bq:
    net.inbetween.webview.IbWebview this$0 -> a
    void run() -> run
net.inbetween.webview.IbWebview$7 -> br:
    net.inbetween.webview.IbWebview this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
net.inbetween.webview.IbWebview$8 -> bs:
    int[] $SwitchMap$net$inbetween$services$ServiceEvent$EventType -> a
net.inbetween.webview.IbWebview$DownloadVideoAsync -> bt:
    boolean titleSet -> a
    net.inbetween.webview.IbWebview this$0 -> b
    java.lang.String downloadFile(java.lang.String) -> a
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
net.inbetween.webview.IbWebview$DownloadVideoAsync$1 -> bu:
    java.lang.String val$downloadFileName -> a
    net.inbetween.webview.IbWebview$DownloadVideoAsync this$1 -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
net.inbetween.webview.IbWebview$JavaScriptInterop -> net.inbetween.webview.IbWebview$JavaScriptInterop:
    net.inbetween.webview.IbWebview this$0 -> a
    void finish() -> finish
    void removeSpinner() -> removeSpinner
    java.lang.String getEnvSuffix() -> getEnvSuffix
    void preLogin() -> preLogin
    void nukeState() -> nukeState
    void nukeData() -> nukeData
    void nukeCookies() -> nukeCookies
    boolean webPackageCheckSkip(boolean) -> webPackageCheckSkip
    java.lang.String getAppBuildId1() -> getAppBuildId1
    void playVideo(java.lang.String) -> playVideo
    void checkForApkUpdate() -> checkForApkUpdate
    void checkForWebUpdate(java.lang.String) -> checkForWebUpdate
    void nukeCookiesByDomain(java.lang.String) -> nukeCookiesByDomain
    void nukeCookie(java.lang.String,java.lang.String) -> nukeCookie
    void importTkt(java.lang.String) -> importTkt
    void loadUrl(java.lang.String) -> loadUrl
    void clearCache(boolean) -> clearCache
    java.lang.String exportTkt() -> exportTkt
    boolean setPrivateMode(int) -> setPrivateMode
    long getPrivateMode() -> getPrivateMode
    boolean setSpeechMode(int) -> setSpeechMode
    int getSpeechMode() -> getSpeechMode
    boolean hasTktCookie() -> hasTktCookie
    void notifyManifestIsLoaded() -> notifyManifestIsLoaded
    void loadLocalFiles() -> loadLocalFiles
    void hideKeyBoard() -> hideKeyBoard
    void servicePhoneHome() -> servicePhoneHome
    boolean startInNews() -> startInNews
    void newsViewed() -> newsViewed
    void batterySavingMode(boolean) -> batterySavingMode
    boolean getBatterySavingMode() -> getBatterySavingMode
    void startAction(java.lang.String,java.lang.String) -> startAction
    void toggleDebug() -> toggleDebug
    boolean debugActivated() -> debugActivated
    void setDebugTalk(boolean) -> setDebugTalk
    boolean debugTalkActivated() -> debugTalkActivated
    void changeEnvironment(java.lang.String) -> changeEnvironment
    boolean sendAnalytics(java.lang.String) -> sendAnalytics
    boolean isConnectedToWifi() -> isConnectedToWifi
    boolean startGPS() -> startGPS
    boolean stopGPS() -> stopGPS
net.inbetween.webview.IbWebview$progressTracking -> bv:
    int totalDownloaded -> a
    int packageSize -> b
    net.inbetween.webview.IbWebview this$0 -> c
net.inbetween.webview.IbWebview$speechMode -> bw:
    net.inbetween.webview.IbWebview$speechMode JUST_SPEAK -> a
    net.inbetween.webview.IbWebview$speechMode SPEAK_AND_LISTEN -> b
    net.inbetween.webview.IbWebview$speechMode SILENT -> c
    net.inbetween.webview.IbWebview$speechMode[] $VALUES -> d
    net.inbetween.webview.IbWebview$speechMode[] values() -> values
    net.inbetween.webview.IbWebview$speechMode valueOf(java.lang.String) -> valueOf
